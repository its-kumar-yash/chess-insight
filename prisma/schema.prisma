// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  analyzedGames AnalyzedGame[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AnalyzedGame {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Game metadata
  platform    String // "lichess" or "chesscom"
  uuid        String // Game identifier from the platform
  pgn         String  @db.Text
  timeClass   String
  timeControl String?
  url         String?
  eco         String?
  fen         String?
  endTime     BigInt? // Using BigInt for timestamp
  date        String?
  result      String?
  winner      String? // "white", "black", or "draw"

  // Player info
  whiteUsername String
  whiteRating   Int?
  blackUsername String
  blackRating   Int?

  // Analysis data
  whiteAccuracy Float?
  blackAccuracy Float?

  // Move classifications
  whiteBrilliant  Int @default(0)
  whiteGreat      Int @default(0)
  whiteBest       Int @default(0)
  whiteExcellent  Int @default(0)
  whiteGood       Int @default(0)
  whiteInaccuracy Int @default(0)
  whiteMistake    Int @default(0)
  whiteBlunder    Int @default(0)
  whiteBook       Int @default(0)
  whiteForced     Int @default(0)

  blackBrilliant  Int @default(0)
  blackGreat      Int @default(0)
  blackBest       Int @default(0)
  blackExcellent  Int @default(0)
  blackGood       Int @default(0)
  blackInaccuracy Int @default(0)
  blackMistake    Int @default(0)
  blackBlunder    Int @default(0)
  blackBook       Int @default(0)
  blackForced     Int @default(0)

  // Each game belongs to a user
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Game moves analysis (stored separately for performance)
  moves MoveReport[]

  @@unique([userId, platform, uuid])
  @@index([userId])
  @@index([platform, uuid])
}


model MoveReport {
  id             String  @id @default(cuid())
  moveIndex      Int
  fen            String
  classification String  // "brilliant", "great", "best", etc.
  eval           Float   // centipawn value
  mate           Int?    // null or number of moves to mate
  
  // Relation to analyzed game
  analyzedGameId String
  analyzedGame   AnalyzedGame @relation(fields: [analyzedGameId], references: [id], onDelete: Cascade)

  @@index([analyzedGameId])
}